
tda1543A_tst.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000200  00800100  0000012c  000001c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800300  00800300  000003c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007d0  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006dd  00000000  00000000  00000c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002cc  00000000  00000000  00001315  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000015e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d5  00000000  00000000  00001638  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000026  00000000  00000000  00001a0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001a33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	13 e0       	ldi	r17, 0x03	; 3
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e2       	ldi	r30, 0x2C	; 44
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b3 e0       	ldi	r27, 0x03	; 3
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 30       	cpi	r26, 0x01	; 1
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 76 00 	call	0xec	; 0xec <main>
  9e:	0c 94 94 00 	jmp	0x128	; 0x128 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <tda1543a_write_sample>:
	while(!(SPSR & (1<<SPIF)));
}

int16_t read_sinus_sample(int s){
	return (int16_t)(sin_tab[s]-32768);
}
  a6:	20 9a       	sbi	0x04, 0	; 4
  a8:	1e bc       	out	0x2e, r1	; 46
  aa:	0d b4       	in	r0, 0x2d	; 45
  ac:	07 fe       	sbrs	r0, 7
  ae:	fd cf       	rjmp	.-6      	; 0xaa <tda1543a_write_sample+0x4>
  b0:	9e bd       	out	0x2e, r25	; 46
  b2:	0d b4       	in	r0, 0x2d	; 45
  b4:	07 fe       	sbrs	r0, 7
  b6:	fd cf       	rjmp	.-6      	; 0xb2 <tda1543a_write_sample+0xc>
  b8:	8e bd       	out	0x2e, r24	; 46
  ba:	0d b4       	in	r0, 0x2d	; 45
  bc:	07 fe       	sbrs	r0, 7
  be:	fd cf       	rjmp	.-6      	; 0xba <tda1543a_write_sample+0x14>
  c0:	20 98       	cbi	0x04, 0	; 4
  c2:	1e bc       	out	0x2e, r1	; 46
  c4:	0d b4       	in	r0, 0x2d	; 45
  c6:	07 fe       	sbrs	r0, 7
  c8:	fd cf       	rjmp	.-6      	; 0xc4 <tda1543a_write_sample+0x1e>
  ca:	7e bd       	out	0x2e, r23	; 46
  cc:	0d b4       	in	r0, 0x2d	; 45
  ce:	07 fe       	sbrs	r0, 7
  d0:	fd cf       	rjmp	.-6      	; 0xcc <tda1543a_write_sample+0x26>
  d2:	6e bd       	out	0x2e, r22	; 46
  d4:	0d b4       	in	r0, 0x2d	; 45
  d6:	07 fe       	sbrs	r0, 7
  d8:	fd cf       	rjmp	.-6      	; 0xd4 <tda1543a_write_sample+0x2e>
  da:	08 95       	ret

000000dc <spi_init>:

void spi_init(void){
	// MOSI (DATA), SCK (BCK) and SS (WS) - outputs
	TDA_PORT |=(1<<WS_PIN)|(1<<CLOCK_PIN)|(1<<DATA_PIN)|(1<<SS_PIN);
  dc:	84 b1       	in	r24, 0x04	; 4
  de:	8d 62       	ori	r24, 0x2D	; 45
  e0:	84 b9       	out	0x04, r24	; 4
	// enable, master, CLK/2, MSb first, sampling on rising clock edge, data change on falling edge, idle clk = 0
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0);
  e2:	81 e5       	ldi	r24, 0x51	; 81
  e4:	8c bd       	out	0x2c, r24	; 44
	SPSR = (1<<SPI2X);
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	8d bd       	out	0x2d, r24	; 45
  ea:	08 95       	ret

000000ec <main>:
	21728, 22489, 23256, 24028, 24806, 25588, 26375, 27166, 27960, 28756, 29556,
30357, 31160, 31963};


int main(void) {
	spi_init();
  ec:	0e 94 6e 00 	call	0xdc	; 0xdc <spi_init>
	while (1) {
		int16_t  LeftSample_16Bit   = read_sinus_sample(probe_idx);
  f0:	e0 91 00 03 	lds	r30, 0x0300	; 0x800300 <__data_end>
		int16_t  RightSample_16Bit  = read_sinus_sample(probe_idx);
  f4:	a0 91 00 03 	lds	r26, 0x0300	; 0x800300 <__data_end>
	SPDR = channel_r;	// to LSB
	while(!(SPSR & (1<<SPIF)));
}

int16_t read_sinus_sample(int s){
	return (int16_t)(sin_tab[s]-32768);
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	aa 0f       	add	r26, r26
  fc:	bb 1f       	adc	r27, r27
  fe:	a0 50       	subi	r26, 0x00	; 0
 100:	bf 4f       	sbci	r27, 0xFF	; 255
int main(void) {
	spi_init();
	while (1) {
		int16_t  LeftSample_16Bit   = read_sinus_sample(probe_idx);
		int16_t  RightSample_16Bit  = read_sinus_sample(probe_idx);
		tda1543a_write_sample(LeftSample_16Bit,RightSample_16Bit);
 102:	6d 91       	ld	r22, X+
 104:	7c 91       	ld	r23, X
 106:	70 58       	subi	r23, 0x80	; 128
	SPDR = channel_r;	// to LSB
	while(!(SPSR & (1<<SPIF)));
}

int16_t read_sinus_sample(int s){
	return (int16_t)(sin_tab[s]-32768);
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	ee 0f       	add	r30, r30
 10c:	ff 1f       	adc	r31, r31
 10e:	e0 50       	subi	r30, 0x00	; 0
 110:	ff 4f       	sbci	r31, 0xFF	; 255
int main(void) {
	spi_init();
	while (1) {
		int16_t  LeftSample_16Bit   = read_sinus_sample(probe_idx);
		int16_t  RightSample_16Bit  = read_sinus_sample(probe_idx);
		tda1543a_write_sample(LeftSample_16Bit,RightSample_16Bit);
 112:	80 81       	ld	r24, Z
 114:	91 81       	ldd	r25, Z+1	; 0x01
 116:	90 58       	subi	r25, 0x80	; 128
 118:	0e 94 53 00 	call	0xa6	; 0xa6 <tda1543a_write_sample>
		probe_idx++;
 11c:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <__data_end>
 120:	8f 5f       	subi	r24, 0xFF	; 255
 122:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <__data_end>
 126:	e4 cf       	rjmp	.-56     	; 0xf0 <main+0x4>

00000128 <_exit>:
 128:	f8 94       	cli

0000012a <__stop_program>:
 12a:	ff cf       	rjmp	.-2      	; 0x12a <__stop_program>
